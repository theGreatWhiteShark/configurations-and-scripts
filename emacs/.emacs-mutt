;;;; A minimal version used within the command line when running mutt
;; loading personal scripts and functions 
(defvar elisp-path '("~/git/configurations-and-scripts/emacs/elisp/"))
(mapcar #'(lambda(p) (add-to-list 'load-path p)) elisp-path)
;; Path to the lisp sources of Emacs
(setq emacs-lisp-source-path "~/git/emacs/lisp")

;; Using the MELPA repository (this has to be on top or packages
;; installed using MELPA will not be found by this script
(require 'package)
;; more packages
(setq package-archives
      '(("ELPA" . "http://tromey.com/elpa/")
	("gnu" . "http://elpa.gnu.org/packages/")
	("melpa" . "https://melpa.org/packages/")
	("marmalade" . "http://marmalade-repo.org/packages/")))
;; (package-initialize)

;; Use company for autocompletion
(add-to-list 'load-path
	     "~/git/configurations-and-scripts/emacs/company-mode")
(require 'company)
(require 'company-gtags)
(add-hook 'after-init-hook 'global-company-mode)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;; spell checking ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Activate on the fly spellchecking for all major modes I use on a
;; regular basis
(load-file "~/git/configurations-and-scripts/emacs/elisp/flyspell.el")
(require 'flyspell2)

;; The default dictionary to be used should be the English one
(setq flyspell-default-dictionary "en")
;; Use a central personal dictionary. (Via a symbolic link from the
;; git repository)
;; The personal dictionary has always to be of the same language as the
;; current used one!
(setq ispell-personal-dictionary "~/.emacs.d/.aspell.en.pws"
      ;; Increase the speed (since we are using the more slower aspell
      ;; instead of ispell)
      ispell-extra-args '("--sug-mode=fast"))

;; Add a german dictionary and the option of switching between
;; languages.
(defun flyspell-switch-dictionary()
  (interactive)
  ;; Change the default dictionary too.
  ;; Well, the functions have a `ispell' prefix. But in the background
  ;; the spell checking is using aspell instead. Be aware of this when
  ;; installing additional software packages.
  (if (string= ispell-current-dictionary "de")
      (setq ispell-personal-dictionary "~/.emacs.d/.aspell.en.pws")
    (setq ispell-personal-dictionary "~/.emacs.d/.aspell.de.pws"))
  (let* ((dic ispell-current-dictionary)
	 (change (if (string= dic "de") "en" "de")))
    (ispell-change-dictionary change)
    (message "Dictionary changed from %s to %s" dic change)))
(global-set-key (kbd "<f8>") 'flyspell-switch-dictionary)

;; Activating Flyspell in the whole buffer.
(dolist (hook '(mutt-mode-hook) t)
  (add-hook hook (lambda() (flyspell-mode 1))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;; web-mode ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Be consistent and use web-mode for all web development stuff
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.ts\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.scss\\'" . web-mode))
;; set indentation to 2
(add-hook 'web-mode-hook
	  (lambda()
	    (local-set-key [M-tab] 'web-mode-fold-or-unfold)
	    (setq web-mode-markup-indent-offset 2)
	    (setq web-mode-css-indent-offset 2)
	    (setq web-mode-code-indent-offset 2)
	    (local-set-key (kbd "M-;") 'windmove-right)
	    (local-set-key (kbd "M-'") 'web-mode-comment-or-uncomment)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;; Diverse ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Show line numbers in all buffers
(global-display-line-numbers-mode 1)

;; Disable the very tricky command formatting all characters within a
;; region/paragraph to lower case. This caused quite a number of bugs.
(put 'downcase-region 'disabled t)

;; Change cursor color when pressing the 'insert' key
(defun set-cursor-according-to-mode ()
  "change cursor color to red if overwrite is activated"
  (cond (overwrite-mode
	 (set-cursor-color "red"))
	(t
	 (set-cursor-color "#dcdccc"))))
(add-hook 'post-command-hook 'set-cursor-according-to-mode)

;; Making buffer names unique
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward uniquify-separatir ":")

;; Uses abbreviations for the modes in the mode-line to shrink it down.
(when (require 'diminish nil 'noerror)
  (eval-after-load "yasnippet"
    '(diminish 'yas-minor-mode " Y")))
(add-hook 'emacs-lisp-mode-hook 
	  (lambda() (setq mode-name "el")))

;; Colorful delimiters 
(require 'rainbow-delimiters)
(dolist (hook '(emacs-lisp-mode-hook
		ess-mode-hook
		lisp-mode-hook
		python-mode-hook
		markdown-mode-hook
		web-mode-hook) t)
  (add-hook hook 'rainbow-delimiters-mode))

;; Changing the style of the mode-line
(setq-default mode-line-format
	      (list
	       ;; changes till last saving
	       '(:eval (when (buffer-modified-p)
			 (concat 
			  (propertize "[" 
				      'face 'font-lock-string-face)
			  (propertize "Mod"
				      'face 'font-lock-string-face
				      'help-echo "Buffer has been modified")
			  (propertize "] "
				      'face 'font-lock-string-face))))
	       ;; buffer/file name
	       '(:eval (propertize "%b " 'face 'font-lock-keyword-face 
				   'help-echo (buffer-file-name)))
	       ;; line and column
	       "(" 
	       (propertize "%02l" 'face 'font-lock-type-face)
	       ","
	       (propertize "%02c" 'face 'font-lock-type-face)
	       ") "
	       ;; check whether or not the buffer was narrowed
	       '(:eval (when (narrowp)
			 (propertize "[narrow] " 'face
				     'font-lock-string-face)))
	       ;; relative position/ size of file
	       "["
	       (propertize "%p" 'face 'font-lock-type-face)
	       "/"
	       (propertize "%I" 'face 'font-lock-type-face)
	       "] "
	       ;; current major mode
	       '(:eval (propertize "%m " 'face 'font-lock-keyword-face
				   'help-echo buffer-file-coding-system))
	       ;; readonly
	       '(:eval (when buffer-read-only
			 (concat " [" 
				 (propertize "readonly"
					     'face 'font-lock-type-face
					     'help-echo "Buffer is read-only")
				 "] ")))
	       ;; adding the time
	       '(:eval (propertize (format-time-string "%H:%M")
				   'face 'font-lock-constant-face
				   'help-echo
				   (concat (format-time-string "%c; ")
					   (emacs-uptime "Uptime: %hh"))))
	       " --"
	       ;; minor modes
	       minor-mode-alist
	       ))
;; Setting of the term colors. Unfortunately this is necessary since
;; using Emacs 24.3 and the zenburn theme
(defface term-color-black 
  '((t (:foreground "#3f3f3f" :background "#272822"))) 
  "Unhelpful docstring.")
(defface term-color-red
  '((t (:foreground "#cc9393" :background "#272822"))) 
  "Unhelpful docstring.")
(defface term-color-green
  '((t (:foreground "#7f9f7f" :background "#272822"))) 
  "Unhelpful docstring.")
(defface term-color-yellow
  '((t (:foreground "#f0dfaf" :background "#272822"))) 
  "Unhelpful docstring.")
(defface term-color-blue 
  '((t (:foreground "#8CD0D3" :background "#272822"))) 
  "Unhelpful docstring.")
(defface term-color-magenta 
  '((t (:foreground "#dc8cc3" :background "#272822"))) 
  "Unhelpful docstring.")
(defface term-color-cyan
  '((t (:foreground "#93e0e3" :background "#272822"))) 
  "Unhelpful docstring.")
(defface term-color-white
  '((t (:foreground "#dcdccc" :background "#272822"))) 
  "Unhelpful docstring.")
'(term-default-fg-color ((t (:inherit term-color-white))))
'(term-default-bg-color ((t (:inherit term-color-black))))

;; ansi-term colors
(add-hook 'term-mode-hook
	  (lambda()
	    (setq-default ansi-term-color-vector
			  [term term-color-black term-color-red
				term-color-green term-color-yellow 
				term-color-blue term-color-magenta
				term-color-cyan term-color-white])
	    (put 'narrow-to-region 'disabled nil)))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#3F3F3F" "#CC93932" "#7F9F7F" "#F0DFAF" "#8CD0D3" "#DC8CC3" "#93E0E3" "#DCDCCC"])
 '(custom-safe-themes
   '("6383295fb0c974d24c9dca1230c0489edf1cd5dd03d4b036aab290b6d3ceb50c" default))
 '(delete-selection-mode nil)
 '(fci-rule-color "#383838")
 '(inhibit-startup-screen t)
 '(mark-even-if-inactive t)
 '(markdown-enable-math t)
 '(package-selected-packages
   '(package-build shut-up epl git commander f dash s golden-ratio company web-mode ts-comint tide multi-web-mode meghanada elm-yasnippets elm-mode docker cask))
 '(scroll-bar-mode 'right)
 '(transient-mark-mode 1)
 '(vc-annotate-background "#2B2B2B")
 '(vc-annotate-color-map
   '((20 . "#BC8383")
     (40 . "#CC9393")
     (60 . "#DFAF8F")
     (80 . "#D0BF8F")
     (100 . "#E0CF9F")
     (120 . "#F0DFAF")
     (140 . "#5F7F5F")
     (160 . "#7F9F7F")
     (180 . "#8FB28F")
     (200 . "#9FC59F")
     (220 . "#AFD8AF")
     (240 . "#BFEBBF")
     (260 . "#93E0E3")
     (280 . "#6CA0A3")
     (300 . "#7CB8BB")
     (320 . "#8CD0D3")
     (340 . "#94BFF3")
     (360 . "#DC8CC3")))
 '(vc-annotate-very-old-color "#DC8CC3"))

;; Minimal mode. Removes some lines and bars from Emacs to make its
;; appearance more appealing
(require 'minimal)
(minimal-mode t)

;; Zenburn color scheme. Low contrast color scheme
(require 'zenburn)

;; Another Zenburn theme (from the git repository)
(add-to-list 'custom-theme-load-path
	     "~/git/configurations-and-scripts/emacs/.emacs.d/themes/")
(load-theme 'zenburn t)		       

;; Turn of blinking cursor (maybe the most important line in this file)
(blink-cursor-mode (- (*) (*) (*)))

;; Highlighting of matching paranthesis
(show-paren-mode t)

;; Modifying markdown mode for correct displaying of German letters
(add-to-list 'load-path
	     "~/git/configurations-and-scripts/emacs/markdown-mode")
(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(autoload 'gfm-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
;; GitHub Flavored Markdown-mode for all README.md files
;; (part of markdown-mode)
(add-to-list 'auto-mode-alist '("README.md" . gfm-mode))

;; Colors and human readable file size in dired
(setq dired-listing-switches "-alh")

;; Transparent background
(set-frame-parameter (selected-frame) 'alpha '(77 . 50))
(add-to-list 'default-frame-alist '(alpha . (77 . 50)))
(set-face-attribute 'default nil :background "black")

;; Use iedit
(add-to-list 'load-path "~/git/configurations-and-scripts/emacs/iedit")
(require 'iedit)

;; Customize the grep command
;; ‘-i’   Ignore case distinctions
;; ‘-n’   Prefix each line of output with line number
;; ‘-H’   Print the filename for each match.
;; ‘-e’   Protect patterns beginning with a hyphen character, ‘-’ 
(setq grep-command "grep -i -nH -e ")

;; Use auto-fill-mode in various modes
(dolist (hook '(mutt-mode-hook) t)
  (add-hook hook (lambda() (auto-fill-mode 1))))

;; Mute Emacs. Yes, there are devices playing a 'beep' received from Emacs.
(setq visible-bell 1)

;; Activate mutt mode
(require 'mutt)

;; Function to display ANSI escape colors in a log file
(require 'ansi-color)
(defun display-ansi-colors ()
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))
